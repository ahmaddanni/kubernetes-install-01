- name: copy kube-proxy certificate
  copy:
   src: "kubernetes/{{item}}"
   dest: "{{kubeHomeDir}}/certs"
  with_items:
  - kube-proxy.pem
  - kube-proxy-key.pem
  register: kubeProxyCert
  notify:
  - restart kube-proxy

- name: download {{serviceName}}-{{kubeVersion}} binary
  get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/{{ kubeVersion }}/bin/linux/amd64/{{serviceName}}"
    dest: "/tmp/{{serviceName}}-{{kubeVersion}}"

- name: install {{serviceName}}-{{kubeVersion}} binaries to {{kubeHomeDir}}/bin/{{serviceName}}
  copy:
    src: "/tmp/{{serviceName}}-{{kubeVersion}}"
    dest: "{{kubeHomeDir}}/bin/{{serviceName}}"
    remote_src: True
    mode: 0544
    owner: root
  notify:
  - restart {{serviceName}}

- name: create kubeconfig for kube-proxy to "{{kubeHomeDir}}/kubelet/kube-proxy.kubeconfig"
  args:
   chdir: "{{kubeHomeDir}}"
  shell: |
    kubectl config set-cluster {{clusterName}} \
      --certificate-authority=certs/kubernetes-ca.pem \
      --embed-certs=true \
      --server={{apiEndpoint}} \
      --kubeconfig=kubelet/kube-proxy.kubeconfig && \
    kubectl config set-credentials system:kube-proxy \
      --client-certificate=certs/kube-proxy.pem \
      --client-key=certs/kube-proxy-key.pem \
      --embed-certs=true \
      --kubeconfig=kubelet/kube-proxy.kubeconfig && \
    kubectl config set-context default \
      --cluster={{clusterName}} \
      --user=system:kube-proxy \
      --kubeconfig=kubelet/kube-proxy.kubeconfig && \
    kubectl config use-context default --kubeconfig=kubelet/kube-proxy.kubeconfig
  notify:
  - restart kube-proxy

- name: create {{serviceName}} systemd unit file
  template:
    src: "{{serviceName}}.service.j2"
    dest: "/etc/systemd/system/{{serviceName}}.service"
    mode: 0644
    backup: yes
  notify:
  - reload units
  - restart {{serviceName}}

- name: start and enable {{serviceName}} service
  systemd:
    name: "{{serviceName}}"
    enabled: yes
    state: started
    daemon-reload: yes

